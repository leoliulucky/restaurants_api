package com.benxiaopao.provider.dao.map;

import com.benxiaopao.provider.dao.model.MobileAuthen;
import com.benxiaopao.provider.dao.model.MobileAuthenExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface MobileAuthenMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @SelectProvider(type=MobileAuthenSqlProvider.class, method="countByExample")
    long countByExample(MobileAuthenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @DeleteProvider(type=MobileAuthenSqlProvider.class, method="deleteByExample")
    int deleteByExample(MobileAuthenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @Delete({
        "delete from mobile_authen",
        "where mobileAuthenId = #{mobileAuthenId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long mobileAuthenId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @Insert({
        "insert into mobile_authen (mobileAuthenId, mobile, ",
        "sendTime, validCode, ",
        "userId)",
        "values (#{mobileAuthenId,jdbcType=BIGINT}, #{mobile,jdbcType=VARCHAR}, ",
        "#{sendTime,jdbcType=TIMESTAMP}, #{validCode,jdbcType=VARCHAR}, ",
        "#{userId,jdbcType=INTEGER})"
    })
    int insert(MobileAuthen record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @InsertProvider(type=MobileAuthenSqlProvider.class, method="insertSelective")
    int insertSelective(MobileAuthen record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @SelectProvider(type=MobileAuthenSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="mobileAuthenId", property="mobileAuthenId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="sendTime", property="sendTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="validCode", property="validCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="userId", property="userId", jdbcType=JdbcType.INTEGER)
    })
    List<MobileAuthen> selectByExample(MobileAuthenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @Select({
        "select",
        "mobileAuthenId, mobile, sendTime, validCode, userId",
        "from mobile_authen",
        "where mobileAuthenId = #{mobileAuthenId,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="mobileAuthenId", property="mobileAuthenId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="sendTime", property="sendTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="validCode", property="validCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="userId", property="userId", jdbcType=JdbcType.INTEGER)
    })
    MobileAuthen selectByPrimaryKey(Long mobileAuthenId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @UpdateProvider(type=MobileAuthenSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") MobileAuthen record, @Param("example") MobileAuthenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @UpdateProvider(type=MobileAuthenSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") MobileAuthen record, @Param("example") MobileAuthenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @UpdateProvider(type=MobileAuthenSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(MobileAuthen record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mobile_authen
     *
     * @mbg.generated Sat Apr 20 10:27:14 CST 2019
     */
    @Update({
        "update mobile_authen",
        "set mobile = #{mobile,jdbcType=VARCHAR},",
          "sendTime = #{sendTime,jdbcType=TIMESTAMP},",
          "validCode = #{validCode,jdbcType=VARCHAR},",
          "userId = #{userId,jdbcType=INTEGER}",
        "where mobileAuthenId = #{mobileAuthenId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(MobileAuthen record);
}